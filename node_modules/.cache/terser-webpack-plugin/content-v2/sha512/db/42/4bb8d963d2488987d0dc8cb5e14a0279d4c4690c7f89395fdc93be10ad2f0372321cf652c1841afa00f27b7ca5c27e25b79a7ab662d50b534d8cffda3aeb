{"map":"{\"version\":3,\"sources\":[\"/Users/patrykkeska/Documents/GitHub/weather-forecast/src/component/Form.js\",\"/Users/patrykkeska/Documents/GitHub/weather-forecast/src/component/Result.js\",\"/Users/patrykkeska/Documents/GitHub/weather-forecast/src/component/App.js\",\"/Users/patrykkeska/Documents/GitHub/weather-forecast/src/serviceWorker.js\",\"/Users/patrykkeska/Documents/GitHub/weather-forecast/src/index.js\"],\"names\":[\"Form\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"onSubmit\",\"click\",\"value\",\"onChange\",\"change\",\"type\",\"placeholder\",\"Result\",\"_props$weather\",\"weather\",\"date\",\"city\",\"sunrise\",\"sunset\",\"temperature\",\"pressure\",\"wind\",\"icon\",\"description\",\"error\",\"content\",\"weatherIcon\",\"concat\",\"sunRise\",\"Date\",\"toLocaleTimeString\",\"sunSet\",\"src\",\"alt\",\"Fragment\",\"App\",\"state\",\"handleInputChange\",\"e\",\"_this\",\"setState\",\"target\",\"handleFindClick\",\"preventDefault\",\"API\",\"toLocaleString\",\"fetch\",\"then\",\"response\",\"ok\",\"Error\",\"json\",\"data\",\"sys\",\"main\",\"temp\",\"toFixed\",\"speed\",\"catch\",\"src_component_Form\",\"this\",\"src_component_Result\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_component_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react'\\nimport '../component/Form.css'\\n\\nconst Form = (props) => {\\n\\n    return (\\n\\n        <form className=\\\"form\\\" onSubmit={props.click}>\\n            <input value={props.value} onChange={props.change} type=\\\"text\\\"\\n                placeholder='type a city name...'\\n            />\\n            <button >Search</button>\\n\\n        </form>\\n    )\\n\\n}\\n\\n\\nexport default Form\",\"import React from 'react'\\nimport '../component/Result.css'\\n// import icon from './icons'\\n\\nconst Result = (props) => {\\n\\n    const { value, date\\n        , city\\n        , sunrise\\n        , sunset\\n        , temperature\\n        , pressure\\n        , wind\\n        , icon\\n        , description\\n        , error } = props.weather;\\n\\n    let content = null;\\n    let weatherIcon = `http://openweathermap.org/img/w/${icon}.png`;\\n\\n\\n\\n    if (city && !error) {\\n        const sunRise = new Date(sunrise * 1000).toLocaleTimeString();\\n        const sunSet = new Date(sunset * 1000).toLocaleTimeString();\\n        content = (\\n            <div className=\\\"weatherResult\\\">\\n                <p>Search results for : <strong>{city}</strong>  on {date} </p>\\n                <img className='weatherIcon' src={weatherIcon} alt=\\\"weather Icon\\\" />\\n                <p>{description}</p>\\n                <p><em>Temperature </em>: {temperature} Â°C</p>\\n                <p><em>Pressure </em>  : {pressure} hPa</p>\\n                <p><em>Wind</em> : {wind} m/s</p>\\n                <p><em>Sunrise </em> : {sunRise}</p>\\n                <p><em> Sunset </em> : {sunSet}</p>\\n            </div>\\n        )\\n\\n    }\\n\\n    return (\\n        <>\\n            {error ? `lack ${city} in the datebase ` : content\\n            }\\n\\n        </ >\\n    )\\n\\n}\\n\\n\\nexport default Result\",\"import React, { Component } from 'react';\\nimport './App.css';\\nimport Form from './Form'\\nimport Result from './Result'\\n\\nclass App extends Component {\\n\\n  state = {\\n    value: '',\\n    date: '',\\n    city: '',\\n    sunrise: ' ',\\n    sunset: ' ',\\n    temperature: ' ',\\n    pressure: ' ',\\n    wind: ' ',\\n    icon: ' ',\\n    description: ' ',\\n    error: false,\\n  }\\n\\n  handleInputChange = (e) => {\\n    this.setState({\\n      value: e.target.value,\\n    })\\n  }\\n\\n  handleFindClick = (e) => {\\n    e.preventDefault();\\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=a9d859ae3b80fbcd7fa5b0c20002adf5&units=metric`\\n    const date = new Date().toLocaleString();\\n    fetch(API)\\n      .then(response => {\\n        if (response.ok) {\\n          return response\\n        }\\n        throw Error('Can not find that city')\\n      }).then(response => response.json())\\n      .then(data =>\\n        this.setState({\\n          date: date,\\n          city: this.state.value,\\n          sunrise: data.sys.sunrise,\\n          sunset: data.sys.sunset,\\n          temperature: data.main.temp.toFixed(0),\\n          pressure: data.main.pressure,\\n          wind: data.wind.speed,\\n          description: data.weather[0].description,\\n          icon: data.weather[0].icon,\\n          error: false,\\n        }))\\n\\n      .catch(error => {\\n        this.setState({\\n          error: true,\\n          city: this.state.value,\\n        })\\n      })\\n  }\\n\\n\\n\\n  render() {\\n    return (\\n      <>\\n        <h1>Weather Forecast</h1>\\n        <Form click={this.handleFindClick} change={this.handleInputChange} value={this.state.value} />\\n        <Result weather={this.state} />\\n\\n      </>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './component/App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render( < App / > , document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,t,n){},16:function(e,t,n){},18:function(e,t,n){},20:function(e,t,n){},22:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),c=n(2),l=n.n(c),i=(n(14),n(3)),o=n(4),u=n(6),s=n(5),m=n(7),h=(n(16),n(18),function(e){return r.a.createElement(\"form\",{className:\"form\",onSubmit:e.click},r.a.createElement(\"input\",{value:e.value,onChange:e.change,type:\"text\",placeholder:\"type a city name...\"}),r.a.createElement(\"button\",null,\"Search\"))}),p=(n(20),function(e){var t=e.weather,n=(t.value,t.date),a=t.city,c=t.sunrise,l=t.sunset,i=t.temperature,o=t.pressure,u=t.wind,s=t.icon,m=t.description,h=t.error,p=null,d=\"http://openweathermap.org/img/w/\".concat(s,\".png\");if(a&&!h){var w=new Date(1e3*c).toLocaleTimeString(),f=new Date(1e3*l).toLocaleTimeString();p=r.a.createElement(\"div\",{className:\"weatherResult\"},r.a.createElement(\"p\",null,\"Search results for : \",r.a.createElement(\"strong\",null,a),\"  on \",n,\" \"),r.a.createElement(\"img\",{className:\"weatherIcon\",src:d,alt:\"weather Icon\"}),r.a.createElement(\"p\",null,m),r.a.createElement(\"p\",null,r.a.createElement(\"em\",null,\"Temperature \"),\": \",i,\" \\xb0C\"),r.a.createElement(\"p\",null,r.a.createElement(\"em\",null,\"Pressure \"),\"  : \",o,\" hPa\"),r.a.createElement(\"p\",null,r.a.createElement(\"em\",null,\"Wind\"),\" : \",u,\" m/s\"),r.a.createElement(\"p\",null,r.a.createElement(\"em\",null,\"Sunrise \"),\" : \",w),r.a.createElement(\"p\",null,r.a.createElement(\"em\",null,\" Sunset \"),\" : \",f))}return r.a.createElement(r.a.Fragment,null,h?\"lack \".concat(a,\" in the datebase \"):p)}),d=function(e){function t(){var e,n;Object(i.a)(this,t);for(var a=arguments.length,r=new Array(a),c=0;c<a;c++)r[c]=arguments[c];return(n=Object(u.a)(this,(e=Object(s.a)(t)).call.apply(e,[this].concat(r)))).state={value:\"\",date:\"\",city:\"\",sunrise:\" \",sunset:\" \",temperature:\" \",pressure:\" \",wind:\" \",icon:\" \",description:\" \",error:!1},n.handleInputChange=function(e){n.setState({value:e.target.value})},n.handleFindClick=function(e){e.preventDefault();var t=\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(n.state.value,\"&APPID=a9d859ae3b80fbcd7fa5b0c20002adf5&units=metric\"),a=(new Date).toLocaleString();fetch(t).then(function(e){if(e.ok)return e;throw Error(\"Can not find that city\")}).then(function(e){return e.json()}).then(function(e){return n.setState({date:a,city:n.state.value,sunrise:e.sys.sunrise,sunset:e.sys.sunset,temperature:e.main.temp.toFixed(0),pressure:e.main.pressure,wind:e.wind.speed,description:e.weather[0].description,icon:e.weather[0].icon,error:!1})}).catch(function(e){n.setState({error:!0,city:n.state.value})})},n}return Object(m.a)(t,e),Object(o.a)(t,[{key:\"render\",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(\"h1\",null,\"Weather Forecast\"),r.a.createElement(h,{click:this.handleFindClick,change:this.handleInputChange,value:this.state.value}),r.a.createElement(p,{weather:this.state}))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));l.a.render(r.a.createElement(d,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,t,n){e.exports=n(22)}},[[8,2,1]]]);","extractedComments":[]}